// Generated by gencpp from file arm_controller/HMIRequest.msg
// DO NOT EDIT!


#ifndef ARM_CONTROLLER_MESSAGE_HMIREQUEST_H
#define ARM_CONTROLLER_MESSAGE_HMIREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_controller
{
template <class ContainerAllocator>
struct HMIRequest_
{
  typedef HMIRequest_<ContainerAllocator> Type;

  HMIRequest_()
    : resultHMI(false)  {
    }
  HMIRequest_(const ContainerAllocator& _alloc)
    : resultHMI(false)  {
  (void)_alloc;
    }



   typedef uint8_t _resultHMI_type;
  _resultHMI_type resultHMI;





  typedef boost::shared_ptr< ::arm_controller::HMIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller::HMIRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HMIRequest_

typedef ::arm_controller::HMIRequest_<std::allocator<void> > HMIRequest;

typedef boost::shared_ptr< ::arm_controller::HMIRequest > HMIRequestPtr;
typedef boost::shared_ptr< ::arm_controller::HMIRequest const> HMIRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_controller::HMIRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_controller::HMIRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_controller::HMIRequest_<ContainerAllocator1> & lhs, const ::arm_controller::HMIRequest_<ContainerAllocator2> & rhs)
{
  return lhs.resultHMI == rhs.resultHMI;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_controller::HMIRequest_<ContainerAllocator1> & lhs, const ::arm_controller::HMIRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_controller::HMIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_controller::HMIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_controller::HMIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_controller::HMIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_controller::HMIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_controller::HMIRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_controller::HMIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73d50d98024fc3c0c5312ac75251e852";
  }

  static const char* value(const ::arm_controller::HMIRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73d50d98024fc3c0ULL;
  static const uint64_t static_value2 = 0xc5312ac75251e852ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller::HMIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_controller/HMIRequest";
  }

  static const char* value(const ::arm_controller::HMIRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_controller::HMIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool resultHMI\n"
;
  }

  static const char* value(const ::arm_controller::HMIRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_controller::HMIRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resultHMI);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMIRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller::HMIRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_controller::HMIRequest_<ContainerAllocator>& v)
  {
    s << indent << "resultHMI: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resultHMI);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MESSAGE_HMIREQUEST_H
