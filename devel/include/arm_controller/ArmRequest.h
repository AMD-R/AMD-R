// Generated by gencpp from file arm_controller/ArmRequest.msg
// DO NOT EDIT!


#ifndef ARM_CONTROLLER_MESSAGE_ARMREQUEST_H
#define ARM_CONTROLLER_MESSAGE_ARMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_controller
{
template <class ContainerAllocator>
struct ArmRequest_
{
  typedef ArmRequest_<ContainerAllocator> Type;

  ArmRequest_()
    : dist_x(0.0)
    , dist_y(0.0)
    , dist_z(0.0)
    , rpm_y(0)
    , rpm_z(0)
    , cmd_x(false)  {
    }
  ArmRequest_(const ContainerAllocator& _alloc)
    : dist_x(0.0)
    , dist_y(0.0)
    , dist_z(0.0)
    , rpm_y(0)
    , rpm_z(0)
    , cmd_x(false)  {
  (void)_alloc;
    }



   typedef float _dist_x_type;
  _dist_x_type dist_x;

   typedef float _dist_y_type;
  _dist_y_type dist_y;

   typedef float _dist_z_type;
  _dist_z_type dist_z;

   typedef int16_t _rpm_y_type;
  _rpm_y_type rpm_y;

   typedef int16_t _rpm_z_type;
  _rpm_z_type rpm_z;

   typedef uint8_t _cmd_x_type;
  _cmd_x_type cmd_x;





  typedef boost::shared_ptr< ::arm_controller::ArmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_controller::ArmRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ArmRequest_

typedef ::arm_controller::ArmRequest_<std::allocator<void> > ArmRequest;

typedef boost::shared_ptr< ::arm_controller::ArmRequest > ArmRequestPtr;
typedef boost::shared_ptr< ::arm_controller::ArmRequest const> ArmRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_controller::ArmRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_controller::ArmRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_controller::ArmRequest_<ContainerAllocator1> & lhs, const ::arm_controller::ArmRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dist_x == rhs.dist_x &&
    lhs.dist_y == rhs.dist_y &&
    lhs.dist_z == rhs.dist_z &&
    lhs.rpm_y == rhs.rpm_y &&
    lhs.rpm_z == rhs.rpm_z &&
    lhs.cmd_x == rhs.cmd_x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_controller::ArmRequest_<ContainerAllocator1> & lhs, const ::arm_controller::ArmRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_controller::ArmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_controller::ArmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_controller::ArmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_controller::ArmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_controller::ArmRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_controller::ArmRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_controller::ArmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfe05b3d31fda1f208b5c16a4f011f4c";
  }

  static const char* value(const ::arm_controller::ArmRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfe05b3d31fda1f2ULL;
  static const uint64_t static_value2 = 0x08b5c16a4f011f4cULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_controller::ArmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_controller/ArmRequest";
  }

  static const char* value(const ::arm_controller::ArmRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_controller::ArmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dist_x\n"
"float32 dist_y\n"
"float32 dist_z\n"
"int16 rpm_y\n"
"int16 rpm_z\n"
"bool cmd_x\n"
;
  }

  static const char* value(const ::arm_controller::ArmRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_controller::ArmRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist_x);
      stream.next(m.dist_y);
      stream.next(m.dist_z);
      stream.next(m.rpm_y);
      stream.next(m.rpm_z);
      stream.next(m.cmd_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_controller::ArmRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_controller::ArmRequest_<ContainerAllocator>& v)
  {
    s << indent << "dist_x: ";
    Printer<float>::stream(s, indent + "  ", v.dist_x);
    s << indent << "dist_y: ";
    Printer<float>::stream(s, indent + "  ", v.dist_y);
    s << indent << "dist_z: ";
    Printer<float>::stream(s, indent + "  ", v.dist_z);
    s << indent << "rpm_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rpm_y);
    s << indent << "rpm_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rpm_z);
    s << indent << "cmd_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CONTROLLER_MESSAGE_ARMREQUEST_H
