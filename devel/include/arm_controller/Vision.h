// Generated by gencpp from file arm_controller/Vision.msg
// DO NOT EDIT!


#ifndef ARM_CONTROLLER_MESSAGE_VISION_H
#define ARM_CONTROLLER_MESSAGE_VISION_H

#include <ros/service_traits.h>


#include <arm_controller/VisionRequest.h>
#include <arm_controller/VisionResponse.h>


namespace arm_controller
{

struct Vision
{

typedef VisionRequest Request;
typedef VisionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Vision
} // namespace arm_controller


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::arm_controller::Vision > {
  static const char* value()
  {
    return "d0cf9def13deaa61d90a385578ef9f46";
  }

  static const char* value(const ::arm_controller::Vision&) { return value(); }
};

template<>
struct DataType< ::arm_controller::Vision > {
  static const char* value()
  {
    return "arm_controller/Vision";
  }

  static const char* value(const ::arm_controller::Vision&) { return value(); }
};


// service_traits::MD5Sum< ::arm_controller::VisionRequest> should match
// service_traits::MD5Sum< ::arm_controller::Vision >
template<>
struct MD5Sum< ::arm_controller::VisionRequest>
{
  static const char* value()
  {
    return MD5Sum< ::arm_controller::Vision >::value();
  }
  static const char* value(const ::arm_controller::VisionRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::arm_controller::VisionRequest> should match
// service_traits::DataType< ::arm_controller::Vision >
template<>
struct DataType< ::arm_controller::VisionRequest>
{
  static const char* value()
  {
    return DataType< ::arm_controller::Vision >::value();
  }
  static const char* value(const ::arm_controller::VisionRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::arm_controller::VisionResponse> should match
// service_traits::MD5Sum< ::arm_controller::Vision >
template<>
struct MD5Sum< ::arm_controller::VisionResponse>
{
  static const char* value()
  {
    return MD5Sum< ::arm_controller::Vision >::value();
  }
  static const char* value(const ::arm_controller::VisionResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::arm_controller::VisionResponse> should match
// service_traits::DataType< ::arm_controller::Vision >
template<>
struct DataType< ::arm_controller::VisionResponse>
{
  static const char* value()
  {
    return DataType< ::arm_controller::Vision >::value();
  }
  static const char* value(const ::arm_controller::VisionResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ARM_CONTROLLER_MESSAGE_VISION_H
